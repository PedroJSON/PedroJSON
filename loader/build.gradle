//
// build.gradle for PedroJSON library
//

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'io.github.pedrojson'

// Use environment variable for version (set by GitHub Actions) or fallback to default
def getVersionName = { ->
    // Try to get version from environment variable (GitHub release)
    def releaseVersion = System.getenv('RELEASE_VERSION')
    if (releaseVersion) {
        return releaseVersion
    }
    
    // Try to get version from Git tag
    try {
        def gitTag = 'git describe --tags --exact-match HEAD'.execute().text.trim()
        if (gitTag) {
            return gitTag.startsWith('v') ? gitTag.substring(1) : gitTag
        }
    } catch (Exception ignored) {
        // Fallback to default version
    }
    
    // Default version for local development
    return '1.0.4-alpha'
}

version getVersionName()
description 'A JSON-based path loading library for Pedro Pathing'

ext {
    PUBLISH_GROUP_ID = 'io.github.pedrojson'
    PUBLISH_ARTIFACT_ID = 'pedrojson-loader'
    PUBLISH_VERSION = getVersionName()
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 24
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 28
        
        // Version info for the library
        versionCode 1
        versionName version
    }

    // Use the old namespace format to avoid R file generation issues
    packagingOptions {
        jniLibs.useLegacyPackaging true
    }
    
    // Configure build types
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    // Ensure Java 8 compatibility
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    mavenCentral()
    google()

    maven { url = 'https://maven.brott.dev/' }
    maven { url= "https://maven.pedropathing.com/" }

}

dependencies {
    annotationProcessor files('lib/OpModeAnnotationProcessor.jar')

    implementation 'org.firstinspires.ftc:Inspection:10.2.0'
    implementation 'org.firstinspires.ftc:Blocks:10.2.0'
    implementation 'org.firstinspires.ftc:RobotCore:10.2.0'
    implementation 'org.firstinspires.ftc:RobotServer:10.2.0'
    implementation 'org.firstinspires.ftc:OnBotJava:10.2.0'
    implementation 'org.firstinspires.ftc:Hardware:10.2.0'
    implementation 'org.firstinspires.ftc:FtcCommon:10.2.0'
    implementation 'org.firstinspires.ftc:Vision:10.2.0'
    compileOnly 'com.pedropathing:pedro:1.0.9'

    //noinspection GradleDependency
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.acmerobotics.dashboard:dashboard:0.4.16'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    
    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'com.pedropathing:pedro:1.0.9' // Available for tests
}

// Task to generate sources JAR
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

// Task to generate Javadoc JAR (create empty one for now)
task androidJavadocsJar(type: Jar) {
    archiveClassifier.set('javadoc')
    // Create empty javadoc jar for now to satisfy Maven Central requirements
}

// Configure what gets published
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

signing {
    // Signing is required for Maven Central
    def signingKeyId = findProperty('signing.keyId')
    def signingPassword = findProperty('signing.password')
    def signingKey = findProperty('signing.secretKeyRingFile')
    
    // Use in-memory key if available (for CI/CD)
    def signingKeyAscii = findProperty('signingKey') ?: System.getenv('SIGNING_KEY')
    def signingPasswordEnv = findProperty('signingPassword') ?: System.getenv('SIGNING_PASSWORD')
    
    if (signingKeyAscii && signingPasswordEnv) {
        useInMemoryPgpKeys(signingKeyAscii, signingPasswordEnv)
        sign publishing.publications
    } else if (signingKeyId && signingPassword && signingKey) {
        sign publishing.publications
    } else {
        // For local development, signing is optional
        println "⚠️  Signing not configured - publications will not be signed"
        println "   This is OK for local testing, but required for Maven Central"
    }
}

publishing {
    repositories {
        // GitHub Packages (for internal releases)
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/pedrojson/PedroJSON")
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('GITHUB_ACTOR')
                password = project.findProperty('gpr.key') ?: System.getenv('GITHUB_TOKEN')
            }
        }
        
        // Maven Central (for public releases)
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.findProperty('ossrhUsername') ?: System.getenv('OSSRH_USERNAME')
                password = project.findProperty('ossrhPassword') ?: System.getenv('OSSRH_PASSWORD')
            }
        }
    }
    
    publications {
        // GitHub Packages publication
        gpr(MavenPublication) {
            groupId = PUBLISH_GROUP_ID
            artifactId = PUBLISH_ARTIFACT_ID
            version = PUBLISH_VERSION
            
            // Publish the release AAR
            afterEvaluate {
                from components.release
            }
            
            // Include sources and javadoc
            artifact androidSourcesJar
            artifact androidJavadocsJar
            
            pom {
                name = 'PedroJSON Loader'
                description = 'A JSON-based path loading library for Pedro Pathing'
                url = 'https://github.com/pedrojson/PedroJSON'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
                
                developers {
                    developer {
                        id = 'pedrojson'
                        name = 'PedroJSON Team'
                        email = 'aksandvick@icloud.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/pedrojson/PedroJSON.git'
                    developerConnection = 'scm:git:ssh://github.com:pedrojson/PedroJSON.git'
                    url = 'https://github.com/pedrojson/PedroJSON/tree/master'
                }
            }
        }
        
        // Maven Central publication
        maven(MavenPublication) {
            groupId = PUBLISH_GROUP_ID
            artifactId = PUBLISH_ARTIFACT_ID
            version = PUBLISH_VERSION
            
            // Publish the release AAR
            afterEvaluate {
                from components.release
            }
            
            // Include sources and javadoc
            artifact androidSourcesJar
            artifact androidJavadocsJar
            
            pom {
                name = 'PedroJSON Loader'
                description = 'A JSON-based path loading library for Pedro Pathing'
                url = 'https://github.com/pedrojson/PedroJSON'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
                
                developers {
                    developer {
                        id = 'pedrojson'
                        name = 'PedroJSON Team'
                        email = 'aksandvick@icloud.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/pedrojson/PedroJSON.git'
                    developerConnection = 'scm:git:ssh://github.com:pedrojson/PedroJSON.git'
                    url = 'https://github.com/pedrojson/PedroJSON/tree/master'
                }
                
                // Maven Central requires all dependencies to be explicitly declared
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    
                    // Add runtime dependencies
                    configurations.implementation.allDependencies.each {
                        if (it.group != null && it.name != 'unspecified' && !it.name.contains('pedro')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'runtime')
                        }
                    }
                }
            }
        }
    }
}